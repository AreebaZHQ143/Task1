Task 1:
using System;
using System.Linq;
using System.Text.RegularExpressions;

class PasswordChecker
{
    static void Main()
    {
        // Example Registration Number (replace with actual registration number)
        string registrationNumber = "047";

        // Example Name (replace with your actual name)
        string name = "Areeba";
      
        // User Input for Password
        Console.Write("Enter your password: ");
        string password = Console.ReadLine();
      

        // Ensure the password is not empty
        if (string.IsNullOrEmpty(password))
        {
            Console.WriteLine("You must enter a password.");
            return; // Exit the program if no password is entered
        }

        // Check if the password meets all the conditions
        if (IsPasswordValid(password, registrationNumber, name))
        {
            Console.WriteLine("Password is valid.");
        }
        else
        {
            Console.WriteLine("Password is invalid.");
        }

        Console.ReadKey();
    }

    static bool IsPasswordValid(string password, string registrationNumber, string name)
    {
        // Condition 1: Maximum length is 12 characters
        if (password.Length > 12)
        {
            Console.WriteLine("Password is too long. Maximum length is 12.");
            return false;
        }

        // Condition 2: Must contain at least 2 characters from the registration number
        if (!Regex.IsMatch(password, $"[{registrationNumber}]"))
        {
            Console.WriteLine("Password does not contain enough characters from the registration number.");
            return false;
        }

        // Condition 3: Must contain at least one uppercase alphabet
        if (!Regex.IsMatch(password, "[A-Z]"))
        {
            Console.WriteLine("Password must contain at least one uppercase letter.");
            return false;
        }

        // Condition 4: At least 2 special characters in order
        if (!HasTwoSpecialCharactersInOrder(password))
        {
            Console.WriteLine("Password must contain at least two special characters in order.");
            return false;
        }

        // Condition 5: Must contain at least 4 lowercase letters from the name
        int lowercaseLettersFromName = password.Count(c => name.IndexOf(c.ToString(), StringComparison.OrdinalIgnoreCase) >= 0 && char.IsLower(c));
        if (lowercaseLettersFromName < 4)
        {
            Console.WriteLine("Password must contain at least 4 lowercase letters from the name.");
            return false;
        }

        return true;
    }

    static bool HasTwoSpecialCharactersInOrder(string password)
    {
        // Define a list of special characters in the order you need
        char[] specialCharacters = new char[] { '@','#','$','%','^','&','*' };

        // Check if there are two consecutive special characters in the password
        for (int i = 0; i < password.Length - 1; i++)
        {
            if (specialCharacters.Contains(password[i]) && specialCharacters.Contains(password[i + 1]))
            {
                return true;
            }
        }

        return false;
    }
}

Task 2:

using System;
using System.Text;
using System.Linq;

class PasswordGenerator
{
    static void Main()
    {
        // Collecting inputs from the user
        Console.Write("Enter your first name: ");
        string firstName = Console.ReadLine();

        Console.Write("Enter your last name: ");
        string lastName = Console.ReadLine();

        Console.Write("Enter your registration number (3 digits): ");
        string regNumber = Console.ReadLine();

        Console.Write("Enter your favorite movie: ");
        string favMovie = Console.ReadLine();

        Console.Write("Enter your favorite food: ");
        string favFood = Console.ReadLine();

        // Generate a random password based on the inputs
        string password = GenerateRandomPassword(firstName, lastName, regNumber, favMovie, favFood);

        Console.WriteLine($"Generated Password: {password}");
    }

    static string GenerateRandomPassword(string firstName, string lastName, string regNumber, string favMovie, string favFood)
    {
        // Start constructing the password
        StringBuilder password = new StringBuilder();

        // Add first 2 characters from first name (if available)
        if (firstName.Length >= 2)
        {
            password.Append(firstName.Substring(0, 2));
        }

        // Add first 2 characters from last name (if available)
        if (lastName.Length >= 2)
        {
            password.Append(lastName.Substring(0, 2));
        }

        // Add 3 digits from registration number (ensuring it's numeric and 3 digits)
        if (regNumber.Length == 3 && regNumber.All(char.IsDigit))
        {
            password.Append(regNumber);
        }

        // Add last 2 characters from favorite movie (if available)
        if (favMovie.Length >= 2)
        {
            password.Append(favMovie.Substring(favMovie.Length - 2));
        }

        // Add last 2 characters from favorite food (if available)
        if (favFood.Length >= 2)
        {
            password.Append(favFood.Substring(favFood.Length - 2));
        }

        // Add a random special character
        string specialChars = "@#$%^&*!&()_+=-";
        Random rand = new Random();
        password.Append(specialChars[rand.Next(specialChars.Length)]);

        // Add a random number
        password.Append(rand.Next(0, 10));

        // Add an uppercase letter
        string upperCaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        password.Append(upperCaseChars[rand.Next(upperCaseChars.Length)]);

        // Add a random length from 8 to 12
        while (password.Length < rand.Next(8, 13))
        {
            password.Append(specialChars[rand.Next(specialChars.Length)]);
        }

        return password.ToString();
    }
}
