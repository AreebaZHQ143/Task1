Task 1:
using System;
using System.Linq;
using System.Text.RegularExpressions;

class PasswordChecker
{
    static void Main()
    {
        // Example Registration Number (replace with actual registration number)
        string registrationNumber = "047";

        // Example Name (replace with your actual name)
        string name = "Areeba";
      
        // User Input for Password
        Console.Write("Enter your password: ");
        string password = Console.ReadLine();
      

        // Ensure the password is not empty
        if (string.IsNullOrEmpty(password))
        {
            Console.WriteLine("You must enter a password.");
            return; // Exit the program if no password is entered
        }

        // Check if the password meets all the conditions
        if (IsPasswordValid(password, registrationNumber, name))
        {
            Console.WriteLine("Password is valid.");
        }
        else
        {
            Console.WriteLine("Password is invalid.");
        }

        Console.ReadKey();
    }

    static bool IsPasswordValid(string password, string registrationNumber, string name)
    {
        // Condition 1: Maximum length is 12 characters
        if (password.Length > 12)
        {
            Console.WriteLine("Password is too long. Maximum length is 12.");
            return false;
        }

        // Condition 2: Must contain at least 2 characters from the registration number
        if (!Regex.IsMatch(password, $"[{registrationNumber}]"))
        {
            Console.WriteLine("Password does not contain enough characters from the registration number.");
            return false;
        }

        // Condition 3: Must contain at least one uppercase alphabet
        if (!Regex.IsMatch(password, "[A-Z]"))
        {
            Console.WriteLine("Password must contain at least one uppercase letter.");
            return false;
        }

        // Condition 4: At least 2 special characters in order
        if (!HasTwoSpecialCharactersInOrder(password))
        {
            Console.WriteLine("Password must contain at least two special characters in order.");
            return false;
        }

        // Condition 5: Must contain at least 4 lowercase letters from the name
        int lowercaseLettersFromName = password.Count(c => name.IndexOf(c.ToString(), StringComparison.OrdinalIgnoreCase) >= 0 && char.IsLower(c));
        if (lowercaseLettersFromName < 4)
        {
            Console.WriteLine("Password must contain at least 4 lowercase letters from the name.");
            return false;
        }

        return true;
    }

    static bool HasTwoSpecialCharactersInOrder(string password)
    {
        // Define a list of special characters in the order you need
        char[] specialCharacters = new char[] { '@','#','$','%','^','&','*' };

        // Check if there are two consecutive special characters in the password
        for (int i = 0; i < password.Length - 1; i++)
        {
            if (specialCharacters.Contains(password[i]) && specialCharacters.Contains(password[i + 1]))
            {
                return true;
            }
        }

        return false;
    }
}

Task 2:
using System;
using System.Linq;
using System.Text;

class RandomPasswordGenerator
{
    static void Main()
    {
        // Collecting user input for password generation
        Console.Write("Enter your First Name: ");
        string firstName = Console.ReadLine();

        Console.Write("Enter your Last Name: ");
        string lastName = Console.ReadLine();

        Console.Write("Enter your Registration Number: ");
        string registrationNumber = Console.ReadLine();

        Console.Write("Enter your Favorite Movie: ");
        string favoriteMovie = Console.ReadLine();

        Console.Write("Enter your Favorite Food: ");
        string favoriteFood = Console.ReadLine();

        // Generate and display the random password
        string password = GenerateRandomPassword(firstName, lastName, registrationNumber, favoriteMovie, favoriteFood);
        Console.WriteLine("\nGenerated Password: " + password);
        Console.ReadKey();
    }

    static string GenerateRandomPassword(string firstName, string lastName, string registrationNumber, string favoriteMovie, string favoriteFood)
    {
        Random random = new Random();
        StringBuilder passwordBuilder = new StringBuilder();

        // Add parts of user input for personalization
        passwordBuilder.Append(firstName.Substring(0, Math.Min(3, firstName.Length))); // First 3 characters of First Name
        passwordBuilder.Append(lastName.Substring(0, Math.Min(3, lastName.Length))); // First 3 characters of Last Name
        passwordBuilder.Append(registrationNumber.Substring(0, Math.Min(4, registrationNumber.Length))); // First 4 characters of Registration Number
        passwordBuilder.Append(favoriteMovie.Substring(0, Math.Min(3, favoriteMovie.Length))); // First 3 characters of Favorite Movie
        passwordBuilder.Append(favoriteFood.Substring(0, Math.Min(3, favoriteFood.Length))); // First 3 characters of Favorite Food

        // Add random digits
        for (int i = 0; i < 2; i++)
        {
            passwordBuilder.Append(random.Next(0, 10)); // Append a random digit
        }

        // Add random special characters
        char[] specialCharacters = { '!', '@', '#', '$', '%', '^', '&', '*' };
        passwordBuilder.Append(specialCharacters[random.Next(specialCharacters.Length)]); // Add a random special character

        // Add a random uppercase letter
        passwordBuilder.Append((char)random.Next('A', 'Z' + 1)); // Add a random uppercase letter

        // Add random lowercase letter
        passwordBuilder.Append((char)random.Next('a', 'z' + 1)); // Add a random lowercase letter

        // Shuffle the characters to ensure randomness
        string password = new string(passwordBuilder.ToString().OrderBy(c => random.Next()).ToArray());

        // Ensure the password has a minimum length of 12 characters
        while (password.Length < 12)
        {
            password += (char)random.Next('a', 'z' + 1); // Add random lowercase letter if password is too short
        }

        return password;
    }
}
